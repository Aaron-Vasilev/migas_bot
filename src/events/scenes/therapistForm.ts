//@ts-nocheck
import { type Client } from 'pg'
import { Scenes, Markup } from 'telegraf'
import { Message } from '../../utils/consts'
import { therapistFormKeyboardScale, validateNumber } from '../../utils'

export const THERAPIST_FORM = 'therapistForm'

export const therapistForm = (db: Client) => (new Scenes.WizardScene(THERAPIST_FORM,
  ctx => {
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —Ç–µ—Ä–∞–ø–∏–∏ (50 –º–∏–Ω—É—Ç)')

    return ctx.wizard.next()
  },
  async ctx => {
    const price = ctx.message.text
    
    if (!validateNumber(price)) return ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π")

    ctx.wizard.state.price = price
    await ctx.reply("–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:")
    ctx.reply("–ö–∞—Ä—å–µ—Ä–∞", therapistFormKeyboardScale())

    return ctx.wizard.next()
  },
  ctx => {
    if (!ctx.update.callback_query) return ctx.reply(Message.notButton)
    
    ctx.wizard.state.career = ctx.update.callback_query.data
    ctx.reply("–°–µ–º–µ–π–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è", therapistFormKeyboardScale())

    return ctx.wizard.next()
  },
  ctx => {
    if (!ctx.update.callback_query) return ctx.reply(Message.notButton)
    
    ctx.wizard.state.family = ctx.update.callback_query.data
    ctx.reply("–¢–µ—Ä–∞–ø–∏—è –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–∞", therapistFormKeyboardScale())

    return ctx.wizard.next()
  },
  ctx => {
    if (!ctx.update.callback_query) return ctx.reply(Message.notButton)
    
    ctx.wizard.state.teen = ctx.update.callback_query.data
    ctx.reply("–ü–æ–∏—Å–∫ —Å–µ–±—è", therapistFormKeyboardScale())

    return ctx.wizard.next()
  },
  ctx => {
    if (!ctx.update.callback_query) return ctx.reply(Message.notButton)
    
    ctx.wizard.state.self = ctx.update.callback_query.data
    ctx.reply("–í–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏", therapistFormKeyboardScale())

    return ctx.wizard.next()
  },
  ctx => {
    if (!ctx.update.callback_query) return ctx.reply(Message.notButton)
    
    ctx.wizard.state.relations = ctx.update.callback_query.data
    ctx.reply("–ü—Å–∏—Ö–æ—Å–æ–º–∞—Ç–∏–∫–∞", therapistFormKeyboardScale())

    return ctx.wizard.next()
  },
  ctx => {
    if (!ctx.update.callback_query) return ctx.reply(Message.notButton)
    
    ctx.wizard.state.psychosomatic = ctx.update.callback_query.data
    ctx.reply("–ë–µ–∑ —á–µ—Ç–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞", therapistFormKeyboardScale())

    return ctx.wizard.next()
  },
  ctx => {
    if (!ctx.update.callback_query) return ctx.reply(Message.notButton)
    
    ctx.wizard.state.doubt = ctx.update.callback_query.data
    ctx.reply("–ö–∞–∫—É—é —Ç–µ—Ä–∞–ø–∏—é –≤—ã –≤–µ–¥—ë—Ç–µ?", {
    ...Markup.inlineKeyboard([
        [Markup.button.callback('–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é', '1')],
        [Markup.button.callback('–ö–æ—Ä–æ—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é (–¥–æ 10 —Å–µ–∞–Ω—Å–æ–≤)', '2')],
        [Markup.button.callback('–õ—é–±—É—é', '0')],
      ])
    })

    return ctx.wizard.next()
  },
  ctx => {
    if (!ctx.update.callback_query) return ctx.reply(Message.notButton)

    ctx.wizard.state.duration = ctx.update.callback_query.data
    ctx.reply("–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", {
      ...Markup.inlineKeyboard([
        [Markup.button.callback('–û—á–Ω–æ –≤ –ú–æ—Å–∫–≤–µ', '1')],
        [Markup.button.callback('', '2')],
        [Markup.button.callback('–õ—é–±–æ–º', '0')],
      ])
    })
    
    return ctx.wizard.next()
  },
  ctx => {
    if (!ctx.update.callback_query) return ctx.reply(Message.notButton)

    ctx.wizard.state.format = ctx.update.callback_query.data
    ctx.replyWithHTML("<b>–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è –∫–∞–∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö:</b>\n(—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, –ø—Ä–æ —Å–≤–æ–π –æ–ø—ã—Ç, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞)")
    
    return ctx.wizard.next()
  },
  ctx => {
    if (ctx.message.text.length === 0) return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")

    ctx.wizard.state.description = ctx.message.text
    ctx.replyWithHTML("<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∏</b>\n(–≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ, –ø—Ä–∏–ª–∏—á–Ω–æ–π –æ–¥–µ–∂–¥–µ, —Ñ–æ—Ä–º–∞—Ç - –ø–æ—Ä—Ç—Ä–µ—Çüßëüíº, ‚ùå–Ω–µ —Å–µ–ª—Ñ–∏ü§≥, –≤ —Ñ–æ—Ä–º–µ –∫–≤–∞–¥—Ä–∞—Ç–∞)")
    
    return ctx.wizard.next()
  },
  async ctx => {
    const url = await ctx.telegram.getFileLink(ctx.message.photo.at(-1).file_id)
    const { price, career, family, teen, 
            self, relations, psychosomatic, 
            doubt, format, description } = ctx.wizard.state

    await db.query(`INSERT INTO migas.specialist (id, price, career, family, teen, self, 
                    relations, psychosomatic, doubt, format, description, photo)
                    VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) `, 
                   [ctx.message.from.id, price, career, family, teen, self, relations, 
                    psychosomatic, doubt, format, description, url.href])
    
    return ctx.scene.leave()
  }
))
